Hill Climbing:

def init():
    list=[2, 1, 5, 0, 8, 4, 10, 0, 20, 10]
    return list

def calc_cost(list):
    cost = 0
    l=list
    for i in range(len(l)):
        for j in range(i+1, len(l)):
            if l[j] < l[i]:
                cost = cost + 1
    return cost


def state_generation(current_state, current_state_cost):
    min_cost = current_state_cost
    next_state = current_state.copy()
    for i in range(len(current_state)-1):
        for j in range(i+1,len(current_state)):
            next_state[i],next_state[j] = next_state[j],next_state[i]
            itar_cost = calc_cost(next_state)
            if(itar_cost < min_cost):
                min_cost = itar_cost
                min_state = next_state.copy()
            next_state = current_state.copy()

    if(min_cost < current_state_cost):
        return min_state,min_cost
    else:
        return current_state,None

def goal_test(state):
    if calc_cost(state) == 0 :
        return True
    else:
        return False

def main():
    state=init()
    cost = calc_cost(state)
    while(not goal_test(state)):
        state, cost = state_generation(state, cost)
        if cost is None:
            print(state)
            return
    print(state)
    return

if __name__ == '__main__':
    main()

Output:
[0, 0, 1, 2, 4, 5, 8, 10, 10, 20]

Simulated Annealing:

import math
import random
def init():
    list=[2, 1, 5, 0, 8, 4, 10, 0, 20, 10]
    return list

def calc_cost(list):
    cost = 0
    l=list
    for i in range(len(l)):
        for j in range(i+1, len(l)):
            if l[j] < l[i]:
                cost = cost + 1
    return cost

def state_generation(current_state, current_state_cost):
    min_cost = current_state_cost
    next_state = current_state.copy()
    for i in range(len(current_state)-1):
        for j in range(i+1,len(current_state)):
            next_state[i],next_state[j] = next_state[j],next_state[i]
            new_cost = calc_cost(next_state) 
            if(new_cost < min_cost): 
                min_cost = new_cost 
                min_state = next_state.copy() 
            next_state = current_state.copy() 
    if(min_cost < current_state_cost): 
        return min_state,min_cost 
    elif(min_cost>current_state_cost): 

	     m=current_state_cost - new_cost 
	     check=move_or_not(m) 

    else : 
      m = -1 
      check2=move_or_not(m) 

      return current_state,None 

def move_or_not(m): 

	    cal=pow(math.e, m)	
	    n = random. randint(0,1)
	    if(n>=0 and n<= cal):
		     return min_state,min_cost
	    else:
		     return current_state,None


def goal_test(state):
    if calc_cost(state) == 0 :
        return True
    else:
        return False

def main():
    state=init()
    cost = calc_cost(state)
    while(not goal_test(state)):
        state, cost = state_generation(state, cost)
        if cost is None:
            print(state)
            return
    print(state)
    return

if __name__ == '__main__':
    main()

Output:
[0, 0, 1, 2, 4, 5, 8, 10, 10, 20]